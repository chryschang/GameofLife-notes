Conway's Game of Life
---------------------
Rules:
- Infinite (temporarily finite) 2D orthogonal grid of cells. Each cell can be alive (1) or dead (0).
- Each cell interacts with eight neighbors (N,S,E,W,NE,SE,SW,NW)
- At every step:
    1. Any live cell (1) with < 2 live neighbors dies. (1 -> 0)
    2. Any live cell with 2-3 live neighbors lives. (1 == 1)
    3. Any live cell with > three live neighbors dies. (1 -> 0)
    4. Any dead cell with == 3 live neighbors lives. (0 -> 1)
    
- Initial pattern is the seed of the system. Randomly generated.
- Apply rules to every cell at each tick. Repeat infinitely.

100 x 100 starting grid.
Use numpy.

###popcorn_anachronism's pseudocode:

n_row = 100
n_col = 100
row = []
grid = []

#laying out an empty grid
for x in range(n_row):
    row.append(0)
for y in range(n_col):
    grid.append(row)
        
#populate the grid randomly
from random import randint
for cell in grid:
    cell = randint(0,1)
    
#time for the rules!
def tick(n_row, n_col, grid[][]):
    for x in range(n_row):
        for y in range(n_col):
            #rules 1-3
            if grid[x][y] == 1:
                neighbors = neighborcount(x, y, grid)
                if neighbors < 2 || neighbors > 3:
                    grid[x][y] = 0
            #rule 4
            if grid[x][y] == 0:
                if neighbors == 3:
                    grid[x][y] = 1

def neighborcount(x, y, grid):
    shift_left = x-1
    if shift_left < 0:
    shift_left = 0
    shift_right = x+1
    if shift_right > n_col:
        shift_right = n_col
    #this is in reverse, because "up" is north
    shift_up = y-1
    if shift_up < 0:
        shift_up = 0
    shift_down = y+1
    if shift_down < 0:
        shift_down = 0
            
    NW = grid[shift_left][shift_up]
    N = grid[x][shift_up]
    NE = grid[shift_right][shift_up]
    E = grid[shift_right][y]
    SE = grid[shift_right][shift_down]
    S = grid[x][shift_down]
    SW = grid[shift_left][shift_down]
    W = grid[shift_left][y]
            
    neighbors = NW + N + NE + E + SE + S + SW + W
    return neighbors
     
###to improve neighborcount, options:
# iterate through all, delete center
# replace center with placeholder, iterate through all, replace center
# 
            
###apgt512's pseudocode:
grid[100][100]=filled with 0's

#set initial pattern
grid[x][y]=1

#Rules
#Any live cell with fewer than two live neighbours dies, as if caused by under-population.
#Any live cell with two or three live neighbours lives on to the next generation.
#Any live cell with more than three live neighbours dies, as if by over-population.
#Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.

for i in x:
        for j in y:
            if grid[x][y]==1
                if function_that_sums_the_1's_around_specific_point(grid[x][y])<2:
                    grid[x][y]=0
                ""==2 or ""==3:
                    nothing happens
                "">3:
                    grid[x][y]=0
            elif grid[x][y]==0:
                if function_that_sums_the_1's_around_specific_point(grid[x][y])==3:
                    grid[x][y]=1

function_that_prints_the_grid()